/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TsQueryRouteImport } from './routes/ts-query/route'
import { Route as IndexImport } from './routes/index'
import { Route as TsTableIndexImport } from './routes/ts-table/index'
import { Route as TsQueryIndexImport } from './routes/ts-query/index'
import { Route as BooksIndexImport } from './routes/books/index'

// Create/Update Routes

const TsQueryRouteRoute = TsQueryRouteImport.update({
  id: '/ts-query',
  path: '/ts-query',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TsTableIndexRoute = TsTableIndexImport.update({
  id: '/ts-table/',
  path: '/ts-table/',
  getParentRoute: () => rootRoute,
} as any)

const TsQueryIndexRoute = TsQueryIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => TsQueryRouteRoute,
} as any)

const BooksIndexRoute = BooksIndexImport.update({
  id: '/books/',
  path: '/books/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/ts-query': {
      id: '/ts-query'
      path: '/ts-query'
      fullPath: '/ts-query'
      preLoaderRoute: typeof TsQueryRouteImport
      parentRoute: typeof rootRoute
    }
    '/books/': {
      id: '/books/'
      path: '/books'
      fullPath: '/books'
      preLoaderRoute: typeof BooksIndexImport
      parentRoute: typeof rootRoute
    }
    '/ts-query/': {
      id: '/ts-query/'
      path: '/'
      fullPath: '/ts-query/'
      preLoaderRoute: typeof TsQueryIndexImport
      parentRoute: typeof TsQueryRouteImport
    }
    '/ts-table/': {
      id: '/ts-table/'
      path: '/ts-table'
      fullPath: '/ts-table'
      preLoaderRoute: typeof TsTableIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface TsQueryRouteRouteChildren {
  TsQueryIndexRoute: typeof TsQueryIndexRoute
}

const TsQueryRouteRouteChildren: TsQueryRouteRouteChildren = {
  TsQueryIndexRoute: TsQueryIndexRoute,
}

const TsQueryRouteRouteWithChildren = TsQueryRouteRoute._addFileChildren(
  TsQueryRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/ts-query': typeof TsQueryRouteRouteWithChildren
  '/books': typeof BooksIndexRoute
  '/ts-query/': typeof TsQueryIndexRoute
  '/ts-table': typeof TsTableIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/books': typeof BooksIndexRoute
  '/ts-query': typeof TsQueryIndexRoute
  '/ts-table': typeof TsTableIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/ts-query': typeof TsQueryRouteRouteWithChildren
  '/books/': typeof BooksIndexRoute
  '/ts-query/': typeof TsQueryIndexRoute
  '/ts-table/': typeof TsTableIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/ts-query' | '/books' | '/ts-query/' | '/ts-table'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/books' | '/ts-query' | '/ts-table'
  id: '__root__' | '/' | '/ts-query' | '/books/' | '/ts-query/' | '/ts-table/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  TsQueryRouteRoute: typeof TsQueryRouteRouteWithChildren
  BooksIndexRoute: typeof BooksIndexRoute
  TsTableIndexRoute: typeof TsTableIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  TsQueryRouteRoute: TsQueryRouteRouteWithChildren,
  BooksIndexRoute: BooksIndexRoute,
  TsTableIndexRoute: TsTableIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/ts-query",
        "/books/",
        "/ts-table/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/ts-query": {
      "filePath": "ts-query/route.tsx",
      "children": [
        "/ts-query/"
      ]
    },
    "/books/": {
      "filePath": "books/index.tsx"
    },
    "/ts-query/": {
      "filePath": "ts-query/index.tsx",
      "parent": "/ts-query"
    },
    "/ts-table/": {
      "filePath": "ts-table/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
