/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TsQueryRouteImport } from './routes/ts-query/route'
import { Route as I18nRouteImport } from './routes/i18n/route'
import { Route as FormRouteImport } from './routes/form/route'
import { Route as IndexImport } from './routes/index'
import { Route as ZustandIndexImport } from './routes/zustand/index'
import { Route as TsTableIndexImport } from './routes/ts-table/index'
import { Route as TsQueryIndexImport } from './routes/ts-query/index'
import { Route as I18nIndexImport } from './routes/i18n/index'
import { Route as FormIndexImport } from './routes/form/index'
import { Route as BooksIndexImport } from './routes/books/index'
import { Route as FormCreateImport } from './routes/form/create'
import { Route as FormBookIdImport } from './routes/form/$bookId'

// Create/Update Routes

const TsQueryRouteRoute = TsQueryRouteImport.update({
  id: '/ts-query',
  path: '/ts-query',
  getParentRoute: () => rootRoute,
} as any)

const I18nRouteRoute = I18nRouteImport.update({
  id: '/i18n',
  path: '/i18n',
  getParentRoute: () => rootRoute,
} as any)

const FormRouteRoute = FormRouteImport.update({
  id: '/form',
  path: '/form',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ZustandIndexRoute = ZustandIndexImport.update({
  id: '/zustand/',
  path: '/zustand/',
  getParentRoute: () => rootRoute,
} as any)

const TsTableIndexRoute = TsTableIndexImport.update({
  id: '/ts-table/',
  path: '/ts-table/',
  getParentRoute: () => rootRoute,
} as any)

const TsQueryIndexRoute = TsQueryIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => TsQueryRouteRoute,
} as any)

const I18nIndexRoute = I18nIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => I18nRouteRoute,
} as any)

const FormIndexRoute = FormIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => FormRouteRoute,
} as any)

const BooksIndexRoute = BooksIndexImport.update({
  id: '/books/',
  path: '/books/',
  getParentRoute: () => rootRoute,
} as any)

const FormCreateRoute = FormCreateImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => FormRouteRoute,
} as any)

const FormBookIdRoute = FormBookIdImport.update({
  id: '/$bookId',
  path: '/$bookId',
  getParentRoute: () => FormRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/form': {
      id: '/form'
      path: '/form'
      fullPath: '/form'
      preLoaderRoute: typeof FormRouteImport
      parentRoute: typeof rootRoute
    }
    '/i18n': {
      id: '/i18n'
      path: '/i18n'
      fullPath: '/i18n'
      preLoaderRoute: typeof I18nRouteImport
      parentRoute: typeof rootRoute
    }
    '/ts-query': {
      id: '/ts-query'
      path: '/ts-query'
      fullPath: '/ts-query'
      preLoaderRoute: typeof TsQueryRouteImport
      parentRoute: typeof rootRoute
    }
    '/form/$bookId': {
      id: '/form/$bookId'
      path: '/$bookId'
      fullPath: '/form/$bookId'
      preLoaderRoute: typeof FormBookIdImport
      parentRoute: typeof FormRouteImport
    }
    '/form/create': {
      id: '/form/create'
      path: '/create'
      fullPath: '/form/create'
      preLoaderRoute: typeof FormCreateImport
      parentRoute: typeof FormRouteImport
    }
    '/books/': {
      id: '/books/'
      path: '/books'
      fullPath: '/books'
      preLoaderRoute: typeof BooksIndexImport
      parentRoute: typeof rootRoute
    }
    '/form/': {
      id: '/form/'
      path: '/'
      fullPath: '/form/'
      preLoaderRoute: typeof FormIndexImport
      parentRoute: typeof FormRouteImport
    }
    '/i18n/': {
      id: '/i18n/'
      path: '/'
      fullPath: '/i18n/'
      preLoaderRoute: typeof I18nIndexImport
      parentRoute: typeof I18nRouteImport
    }
    '/ts-query/': {
      id: '/ts-query/'
      path: '/'
      fullPath: '/ts-query/'
      preLoaderRoute: typeof TsQueryIndexImport
      parentRoute: typeof TsQueryRouteImport
    }
    '/ts-table/': {
      id: '/ts-table/'
      path: '/ts-table'
      fullPath: '/ts-table'
      preLoaderRoute: typeof TsTableIndexImport
      parentRoute: typeof rootRoute
    }
    '/zustand/': {
      id: '/zustand/'
      path: '/zustand'
      fullPath: '/zustand'
      preLoaderRoute: typeof ZustandIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface FormRouteRouteChildren {
  FormBookIdRoute: typeof FormBookIdRoute
  FormCreateRoute: typeof FormCreateRoute
  FormIndexRoute: typeof FormIndexRoute
}

const FormRouteRouteChildren: FormRouteRouteChildren = {
  FormBookIdRoute: FormBookIdRoute,
  FormCreateRoute: FormCreateRoute,
  FormIndexRoute: FormIndexRoute,
}

const FormRouteRouteWithChildren = FormRouteRoute._addFileChildren(
  FormRouteRouteChildren,
)

interface I18nRouteRouteChildren {
  I18nIndexRoute: typeof I18nIndexRoute
}

const I18nRouteRouteChildren: I18nRouteRouteChildren = {
  I18nIndexRoute: I18nIndexRoute,
}

const I18nRouteRouteWithChildren = I18nRouteRoute._addFileChildren(
  I18nRouteRouteChildren,
)

interface TsQueryRouteRouteChildren {
  TsQueryIndexRoute: typeof TsQueryIndexRoute
}

const TsQueryRouteRouteChildren: TsQueryRouteRouteChildren = {
  TsQueryIndexRoute: TsQueryIndexRoute,
}

const TsQueryRouteRouteWithChildren = TsQueryRouteRoute._addFileChildren(
  TsQueryRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/form': typeof FormRouteRouteWithChildren
  '/i18n': typeof I18nRouteRouteWithChildren
  '/ts-query': typeof TsQueryRouteRouteWithChildren
  '/form/$bookId': typeof FormBookIdRoute
  '/form/create': typeof FormCreateRoute
  '/books': typeof BooksIndexRoute
  '/form/': typeof FormIndexRoute
  '/i18n/': typeof I18nIndexRoute
  '/ts-query/': typeof TsQueryIndexRoute
  '/ts-table': typeof TsTableIndexRoute
  '/zustand': typeof ZustandIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/form/$bookId': typeof FormBookIdRoute
  '/form/create': typeof FormCreateRoute
  '/books': typeof BooksIndexRoute
  '/form': typeof FormIndexRoute
  '/i18n': typeof I18nIndexRoute
  '/ts-query': typeof TsQueryIndexRoute
  '/ts-table': typeof TsTableIndexRoute
  '/zustand': typeof ZustandIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/form': typeof FormRouteRouteWithChildren
  '/i18n': typeof I18nRouteRouteWithChildren
  '/ts-query': typeof TsQueryRouteRouteWithChildren
  '/form/$bookId': typeof FormBookIdRoute
  '/form/create': typeof FormCreateRoute
  '/books/': typeof BooksIndexRoute
  '/form/': typeof FormIndexRoute
  '/i18n/': typeof I18nIndexRoute
  '/ts-query/': typeof TsQueryIndexRoute
  '/ts-table/': typeof TsTableIndexRoute
  '/zustand/': typeof ZustandIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/form'
    | '/i18n'
    | '/ts-query'
    | '/form/$bookId'
    | '/form/create'
    | '/books'
    | '/form/'
    | '/i18n/'
    | '/ts-query/'
    | '/ts-table'
    | '/zustand'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/form/$bookId'
    | '/form/create'
    | '/books'
    | '/form'
    | '/i18n'
    | '/ts-query'
    | '/ts-table'
    | '/zustand'
  id:
    | '__root__'
    | '/'
    | '/form'
    | '/i18n'
    | '/ts-query'
    | '/form/$bookId'
    | '/form/create'
    | '/books/'
    | '/form/'
    | '/i18n/'
    | '/ts-query/'
    | '/ts-table/'
    | '/zustand/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  FormRouteRoute: typeof FormRouteRouteWithChildren
  I18nRouteRoute: typeof I18nRouteRouteWithChildren
  TsQueryRouteRoute: typeof TsQueryRouteRouteWithChildren
  BooksIndexRoute: typeof BooksIndexRoute
  TsTableIndexRoute: typeof TsTableIndexRoute
  ZustandIndexRoute: typeof ZustandIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  FormRouteRoute: FormRouteRouteWithChildren,
  I18nRouteRoute: I18nRouteRouteWithChildren,
  TsQueryRouteRoute: TsQueryRouteRouteWithChildren,
  BooksIndexRoute: BooksIndexRoute,
  TsTableIndexRoute: TsTableIndexRoute,
  ZustandIndexRoute: ZustandIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/form",
        "/i18n",
        "/ts-query",
        "/books/",
        "/ts-table/",
        "/zustand/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/form": {
      "filePath": "form/route.tsx",
      "children": [
        "/form/$bookId",
        "/form/create",
        "/form/"
      ]
    },
    "/i18n": {
      "filePath": "i18n/route.tsx",
      "children": [
        "/i18n/"
      ]
    },
    "/ts-query": {
      "filePath": "ts-query/route.tsx",
      "children": [
        "/ts-query/"
      ]
    },
    "/form/$bookId": {
      "filePath": "form/$bookId.tsx",
      "parent": "/form"
    },
    "/form/create": {
      "filePath": "form/create.tsx",
      "parent": "/form"
    },
    "/books/": {
      "filePath": "books/index.tsx"
    },
    "/form/": {
      "filePath": "form/index.tsx",
      "parent": "/form"
    },
    "/i18n/": {
      "filePath": "i18n/index.tsx",
      "parent": "/i18n"
    },
    "/ts-query/": {
      "filePath": "ts-query/index.tsx",
      "parent": "/ts-query"
    },
    "/ts-table/": {
      "filePath": "ts-table/index.tsx"
    },
    "/zustand/": {
      "filePath": "zustand/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
